// Mocks generated by Mockito 5.0.15 from annotations
// in pretend/test/data/data_sources/subjects_remote_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:csv/csv.dart' as _i2;
import 'package:csv/csv_settings_autodetection.dart' as _i6;
import 'package:http/src/base_request.dart' as _i10;
import 'package:http/src/client.dart' as _i7;
import 'package:http/src/response.dart' as _i4;
import 'package:http/src/streamed_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeCsvToListSink_0 extends _i1.Fake implements _i2.CsvToListSink {}

class _FakeStreamTransformer_1<S, T> extends _i1.Fake
    implements _i3.StreamTransformer<S, T> {}

class _FakeResponse_2 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_3 extends _i1.Fake implements _i5.StreamedResponse {
}

/// A class which mocks [CsvToListConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockCsvToListConverter extends _i1.Mock
    implements _i2.CsvToListConverter {
  MockCsvToListConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get shouldParseNumbers =>
      (super.noSuchMethod(Invocation.getter(#shouldParseNumbers),
          returnValue: false) as bool);
  @override
  bool get allowInvalid =>
      (super.noSuchMethod(Invocation.getter(#allowInvalid), returnValue: false)
          as bool);
  @override
  List<ArgumentError> verifyCurrentSettings({bool? throwError}) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyCurrentSettings, [], {#throwError: throwError}),
          returnValue: <ArgumentError>[]) as List<ArgumentError>);
  @override
  _i2.CsvToListSink startChunkedConversion(Sink<dynamic>? outputSink) => (super
      .noSuchMethod(Invocation.method(#startChunkedConversion, [outputSink]),
          returnValue: _FakeCsvToListSink_0()) as _i2.CsvToListSink);
  @override
  List<List<dynamic>> convert(String? csv,
          {String? fieldDelimiter,
          String? textDelimiter,
          String? textEndDelimiter,
          String? eol,
          _i6.CsvSettingsDetector? csvSettingsDetector,
          bool? shouldParseNumbers,
          bool? allowInvalid}) =>
      (super.noSuchMethod(
          Invocation.method(#convert, [
            csv
          ], {
            #fieldDelimiter: fieldDelimiter,
            #textDelimiter: textDelimiter,
            #textEndDelimiter: textEndDelimiter,
            #eol: eol,
            #csvSettingsDetector: csvSettingsDetector,
            #shouldParseNumbers: shouldParseNumbers,
            #allowInvalid: allowInvalid
          }),
          returnValue: <List<dynamic>>[]) as List<List<dynamic>>);
  @override
  _i3.Stream<List<dynamic>> bind(_i3.Stream<String>? stream) =>
      (super.noSuchMethod(Invocation.method(#bind, [stream]),
              returnValue: Stream<List<dynamic>>.empty())
          as _i3.Stream<List<dynamic>>);
  @override
  _i3.StreamTransformer<RS, RT> cast<RS, RT>() =>
      (super.noSuchMethod(Invocation.method(#cast, []),
              returnValue: _FakeStreamTransformer_1<RS, RT>())
          as _i3.StreamTransformer<RS, RT>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i8.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i3.Future<_i4.Response>);
  @override
  _i3.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<_i9.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i9.Uint8List>.value(_i9.Uint8List(0)))
          as _i3.Future<_i9.Uint8List>);
  @override
  _i3.Future<_i5.StreamedResponse> send(_i10.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_3()))
          as _i3.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
